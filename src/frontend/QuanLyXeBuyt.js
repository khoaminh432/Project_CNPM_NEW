import React, { useState } from "react";
import "./QuanLyXeBuyt.css";

function QuanLyXeBuyt() {
  const [busData, setBusData] = useState([
    { id: "001", license: "51C-49494", route: "q1-q5, vvk", status: "ƒêang ho·∫°t ƒë·ªông", driver: "L√™ VƒÉn A", departure: "ƒê√£ xu·∫•t ph√°t", registry: "2025-12-31" },
    { id: "002", license: "52B-12345", route: "q8-q7, ttx", status: "ƒêang b·∫£o tr√¨", driver: "L√™ Th·ªã B", departure: "Ch∆∞a xu·∫•t ph√°t", registry: "2024-11-15" },
    { id: "003", license: "54C-56789", route: "q3-q10, ltk", status: "Ng∆∞ng ho·∫°t ƒë·ªông", driver: "Nguy·ªÖn VƒÉn C", departure: "Ch∆∞a xu·∫•t ph√°t", registry: "2026-01-10" },
  ]);

  const [showForm, setShowForm] = useState(false);
  const [formType, setFormType] = useState(""); // "edit" | "add" | "view"
  const [formData, setFormData] = useState({ id: "", license: "", route: "", status: "", driver: "", departure: "", registry: "" });
  const [filterStatus, setFilterStatus] = useState("");
  const [filterDeparture, setFilterDeparture] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const handleAdd = () => {
    setFormType("add");
    setFormData({ id: "", license: "", route: "", status: "", driver: "", departure: "", registry: "" });
    setShowForm(true);
  };

  const handleEdit = (bus) => {
    setFormType("edit");
    setFormData(bus);
    setShowForm(true);
  };

  const handleView = (bus) => {
    setFormType("view");
    setFormData(bus);
    setShowForm(true);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (formType === "add") {
      setBusData([...busData, formData]);
    } else if (formType === "edit") {
      setBusData(busData.map((bus) => (bus.id === formData.id ? formData : bus)));
    }
    setShowForm(false);
  };

  const handleDelete = () => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a xe bu√Ωt n√†y kh√¥ng?")) {
      setBusData(busData.filter((bus) => bus.id !== formData.id));
      setShowForm(false);
    }
  };

  const filteredData = busData.filter(
    (bus) =>
      (filterStatus === "" || bus.status === filterStatus) &&
      (filterDeparture === "" || bus.departure === filterDeparture)
  );

  return (
    <div className="dashboard">
      <aside className="sidebar">
        <h2>DASHBOARD</h2>
      </aside>

      <main className="content">
        <header className="header">
          <h1>QU·∫¢N L√ù XE BU√ùT</h1>
          <div className="profile">Profile ‚¨á</div>
        </header>

        <div className="toolbar">
          <input className="search-box" type="text" placeholder="üîç Search..." />
          <div className="toolbar-buttons">
            <button onClick={() => handleEdit(busData[0])}>Ch·ªânh s·ª≠a</button>
            <button onClick={handleAdd}>+ Th√™m xe bu√Ωt</button>
          </div>
        </div>

        <table className="bus-table">
          <thead>
            <tr>
              <th>M√É S·ªê XE</th>
              <th>TUY·∫æN ƒê∆Ø·ªúNG</th>
              <th>
                T√åNH TR·∫†NG XE{" "}
                <select
                  className="header-filter"
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value)}
                >
                  <option value="">T·∫•t c·∫£</option>
                  <option value="ƒêang ho·∫°t ƒë·ªông">ƒêang ho·∫°t ƒë·ªông</option>
                  <option value="ƒêang b·∫£o tr√¨">ƒêang b·∫£o tr√¨</option>
                  <option value="Ng∆∞ng ho·∫°t ƒë·ªông">Ng∆∞ng ho·∫°t ƒë·ªông</option>
                </select>
              </th>
              <th>T√ÄI X·∫æ</th>
              <th>
                T√åNH TR·∫†NG XU·∫§T PH√ÅT{" "}
                <select
                  className="header-filter"
                  value={filterDeparture}
                  onChange={(e) => setFilterDeparture(e.target.value)}
                >
                  <option value="">T·∫•t c·∫£</option>
                  <option value="ƒê√£ xu·∫•t ph√°t">ƒê√£ xu·∫•t ph√°t</option>
                  <option value="Ch∆∞a xu·∫•t ph√°t">Ch∆∞a xu·∫•t ph√°t</option>
                  <option value="K·∫øt th√∫c chuy·∫øn ƒëi">K·∫øt th√∫c chuy·∫øn ƒëi</option>
                </select>
              </th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((bus) => (
              <tr key={bus.id} onClick={() => handleView(bus)} className="clickable-row">
                <td>
                  <strong>{bus.id}</strong>
                  <small>{bus.license}</small>
                </td>
                <td className="wide-column">{bus.route}</td>
                <td>
                  <span
                    className={`status-badge ${
                      bus.status === "ƒêang ho·∫°t ƒë·ªông"
                        ? "active"
                        : bus.status === "ƒêang b·∫£o tr√¨"
                        ? "maintenance"
                        : "inactive"
                    }`}
                  >
                    {bus.status}
                  </span>
                </td>
                <td className="medium-column">{bus.driver}</td>
                <td>
                  <span
                    className={`departure-badge ${
                      bus.departure === "ƒê√£ xu·∫•t ph√°t"
                        ? "active"
                        : bus.departure === "K·∫øt th√∫c chuy·∫øn ƒëi"
                        ? "maintenance"
                        : "inactive"
                    }`}
                  >
                    {bus.departure}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </main>

      {showForm && (
        <div className="popup">
          <div className="popup-content">
            <h3>
              {formType === "add"
                ? "Th√™m xe bu√Ωt"
                : formType === "edit"
                ? "Ch·ªânh s·ª≠a xe bu√Ωt"
                : "Th√¥ng tin xe bu√Ωt"}
            </h3>

            {/* Popup ch·ªâ hi·ªÉn th·ªã form, kh√¥ng c√≤n notification */}

            <form onSubmit={handleSubmit}>
              <label>M√£ s·ªë xe</label>
              <input
                type="text"
                value={formData.id}
                readOnly={formType === "view"}
                onChange={(e) => {
                  const idValue = e.target.value.trim();
                  const foundBus = busData.find((bus) => bus.id === idValue);
                  if (foundBus) {
                    setFormData(foundBus);
                    setErrorMessage("");
                  } else if (idValue !== "") {
                    setErrorMessage("Kh√¥ng c√≥ th√¥ng tin h·ª£p l·ªá!");
                    setFormData({ id: idValue, license: "", route: "", status: "", driver: "", departure: "", registry: "" });
                  } else {
                    setErrorMessage("");
                    setFormData({ id: "", license: "", route: "", status: "", driver: "", departure: "", registry: "" });
                  }
                }}
                required
              />
              {errorMessage && <p className="error">{errorMessage}</p>}

              <label>Tuy·∫øn ƒë∆∞·ªùng</label>
              <input
                type="text"
                value={formData.route}
                readOnly={formType === "view"}
                onChange={(e) => setFormData({ ...formData, route: e.target.value })}
                required
              />

              <label>T√¨nh tr·∫°ng xe</label>
              <select
                value={formData.status}
                disabled={formType === "view"}
                onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                required
              >
                <option value="">-- Ch·ªçn --</option>
                <option value="ƒêang ho·∫°t ƒë·ªông">ƒêang ho·∫°t ƒë·ªông</option>
                <option value="Ng∆∞ng ho·∫°t ƒë·ªông">Ng∆∞ng ho·∫°t ƒë·ªông</option>
                <option value="ƒêang b·∫£o tr√¨">ƒêang b·∫£o tr√¨</option>
              </select>

              <label>T√†i x·∫ø</label>
              <input
                type="text"
                value={formData.driver}
                readOnly={formType === "view"}
                onChange={(e) => setFormData({ ...formData, driver: e.target.value })}
                required
              />

              <label>T√¨nh tr·∫°ng xu·∫•t ph√°t</label>
              <select
                value={formData.departure}
                disabled={formType === "view"}
                onChange={(e) => setFormData({ ...formData, departure: e.target.value })}
                required
              >
                <option value="">-- Ch·ªçn --</option>
                <option value="ƒê√£ xu·∫•t ph√°t">ƒê√£ xu·∫•t ph√°t</option>
                <option value="K·∫øt th√∫c chuy·∫øn ƒëi">K·∫øt th√∫c chuy·∫øn ƒëi</option>
                <option value="Ch∆∞a xu·∫•t ph√°t">Ch∆∞a xu·∫•t ph√°t</option>
              </select>

              <label>H·∫°n ƒëƒÉng ki·ªÉm</label>
              <input
                type="date"
                value={formData.registry}
                readOnly={formType === "view"}
                onChange={(e) => setFormData({ ...formData, registry: e.target.value })}
                required
              />

              <div className="popup-buttons">
                {formType !== "view" && <button type="submit">L∆∞u</button>}
                <button type="button" onClick={() => setShowForm(false)}>Tho√°t</button>
                {formType !== "add" && (
                  <button type="button" className="delete-btn" onClick={handleDelete}>X√≥a</button>
                )}
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default QuanLyXeBuyt;
