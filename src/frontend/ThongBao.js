import React, { useState } from "react";
import "./ThongBao.css";

export default function ThongBao() {
    const [activeTab, setActiveTab] = useState("all");
    const [showPopup, setShowPopup] = useState(false);

    const [newNotice, setNewNotice] = useState({
        recipient: "",
        title: "",
        content: "",
    });

    // M·∫£ng l∆∞u c√°c file ƒë√£ ch·ªçn
    const [files, setFiles] = useState([]);
    // M·∫£ng ƒë·ªÉ render input file hi·ªán t·∫°i
    const [fileInputs, setFileInputs] = useState([0]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setNewNotice(prev => ({
            ...prev,
            [name]: value,
        }));
    };

    const handleFileChange = (e, index) => {
        const file = e.target.files[0];
        if (!file) return;

        setFiles(prev => [...prev, file]);

        // N·∫øu l√† input cu·ªëi c√πng, th√™m input m·ªõi ph√≠a d∆∞·ªõi
        if (index === fileInputs.length - 1) {
            setFileInputs(prev => [...prev, prev.length]);
        }
    };

    const handleSend = () => {
        console.log("G·ª≠i th√¥ng b√°o:", newNotice);
        if (files.length > 0) {
            console.log("C√°c t·ªáp ƒë√≠nh k√®m:", files.map(f => f.name));
        }
        setShowPopup(false);
        setNewNotice({ recipient: "", title: "", content: "" });
        setFiles([]);
        setFileInputs([0]);
        alert("Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
    };

    const handleCancel = () => {
        setShowPopup(false);
        setNewNotice({ recipient: "", title: "", content: "" });
        setFiles([]);
        setFileInputs([0]);
    };

    const removeFile = (index) => {
        setFiles(prev => {
            const newFiles = [...prev];
            newFiles.splice(index, 1);
            return newFiles;
        });

        setFileInputs(prev => {
            const newInputs = [...prev];
            if (newInputs.length > 1) {
                newInputs.splice(index, 1);
            } else {
                newInputs[0] = 0;
            }
            return newInputs;
        });
    };

    return (
        <div className="dashboard">
            {/* Sidebar gi·ªëng QuanLyXeBuyt */}
            <aside className="sidebar">
                <h2>DASHBOARD</h2>
            </aside>

            {/* N·ªôi dung ch√≠nh */}
            <main className="content">
                {/* Header xanh */}
                <header className="header">
                    <h1>TH√îNG B√ÅO</h1>
                    <div className="profile">üë§ Profile ‚ñº</div>
                </header>

                {/* Ph·∫ßn code c≈© c·ªßa b·∫°n */}
                <div className="thongbao-container">
                    <div className="main">
                        {/* Sidebar nh·ªè b√™n trong */}
                        <div className="sidebar">
                            <button
                                className="btn-create"
                                onClick={() => setShowPopup(true)}
                            >
                                + T·∫°o th√¥ng b√°o
                            </button>
                            <select className="filter-select">
                                <option>Ch·ªçn l·ªçc</option>
                                <option>Ch∆∞a xem</option>
                                <option>ƒê√£ xem</option>
                                <option>ƒê√£ g·ª≠i</option>
                            </select>
                        </div>

                        {/* Content */}
                        <div className="content">
                            <div className="tabs">
                                <button onClick={() => setActiveTab("all")} className={`tab ${activeTab === "all" ? "active" : ""}`}>T·∫•t c·∫£</button>
                                <button onClick={() => setActiveTab("bus")} className={`tab ${activeTab === "bus" ? "active" : ""}`}>Xe bu√Ωt</button>
                                <button onClick={() => setActiveTab("driver")} className={`tab ${activeTab === "driver" ? "active" : ""}`}>T√†i x·∫ø</button>
                                <button onClick={() => setActiveTab("parent")} className={`tab ${activeTab === "parent" ? "active" : ""}`}>Ph·ª• huynh</button>
                            </div>
                            <div className="content-box">N·ªôi dung {activeTab}</div>
                        </div>
                    </div>

                    {/* Popup t·∫°o th√¥ng b√°o */}
                    {showPopup && (
                        <div className="popup-overlay">
                            <div className="popup large-popup">
                                <h2>T·∫°o th√¥ng b√°o m·ªõi</h2>
                                <label>
                                    G·ª≠i ƒë·∫øn:
                                    <select
                                        name="recipient"
                                        value={newNotice.recipient}
                                        onChange={handleChange}
                                    >
                                        <option value="">Ch·ªçn</option>
                                        <option value="driver">T√†i x·∫ø</option>
                                        <option value="system">H·ªá th·ªëng</option>
                                        <option value="parent">Ph·ª• huynh</option>
                                    </select>
                                </label>
                                <label>
                                    Ti√™u ƒë·ªÅ:
                                    <input
                                        type="text"
                                        name="title"
                                        value={newNotice.title}
                                        onChange={handleChange}
                                    />
                                </label>
                                <label>
                                    N·ªôi dung:
                                    <textarea
                                        name="content"
                                        value={newNotice.content}
                                        onChange={handleChange}
                                        rows={8}
                                    />
                                </label>

                                <label>Th√™m t·ªáp:</label>
                                {fileInputs.map((key, index) => {
                                    const file = files[index];
                                    return (
                                        <div key={key} className="file-input-wrapper">
                                            <input
                                                type="file"
                                                onChange={(e) => handleFileChange(e, index)}
                                            />
                                            {file && (
                                                <button
                                                    type="button"
                                                    className="remove-file-btn"
                                                    onClick={() => removeFile(index)}
                                                >
                                                    ‚úñ
                                                </button>
                                            )}
                                        </div>
                                    );
                                })}

                                <div className="popup-buttons">
                                    <button className="btn-send" onClick={handleSend}>G·ª≠i</button>
                                    <button className="btn-cancel" onClick={handleCancel}>H·ªßy</button>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </div>
    );
}
